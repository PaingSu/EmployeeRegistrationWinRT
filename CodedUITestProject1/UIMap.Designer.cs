// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITest.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WindowsRuntimeControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = Microsoft.VisualStudio.TestTools.UITest.Input.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Login - Use 'LoginExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Login()
        {
            #region Variable Declarations
            XamlEdit uITxtUserNameEdit = this.UIEmployeeRegistrationWindow.UITxtUserNameEdit;
            XamlEdit uITxtPasswordEdit = this.UIEmployeeRegistrationWindow.UITxtPasswordEdit;
            XamlButton uILogInButton = this.UIEmployeeRegistrationWindow.UILogInButton;
            #endregion

            // Verify that the 'ControlType' property of 'txtUserName' text box equals 'Edit'
            Assert.AreEqual(this.LoginExpectedValues.UITxtUserNameEditControlType, uITxtUserNameEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtPassword' text box equals 'Edit'
            Assert.AreEqual(this.LoginExpectedValues.UITxtPasswordEditControlType, uITxtPasswordEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'LogIn' button equals 'Button'
            Assert.AreEqual(this.LoginExpectedValues.UILogInButtonControlType, uILogInButton.ControlType.ToString());
        }
        
        /// <summary>
        /// Register - Use 'RegisterExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Register()
        {
            #region Variable Declarations
            XamlButton uIRegisterButton = this.UIEmployeeRegistrationWindow.UIRegisterButton;
            XamlEdit uITxtNameEdit = this.UIEmployeeRegistrationWindow.UITxtNameEdit;
            XamlEdit uITxtNrcEdit = this.UIEmployeeRegistrationWindow.UITxtNrcEdit;
            XamlComboBox uIMonthComboBox = this.UIEmployeeRegistrationWindow.UIDatepickerGroup.UIMonthComboBox;
            XamlComboBox uIDayComboBox = this.UIEmployeeRegistrationWindow.UIDatepickerGroup.UIDayComboBox;
            XamlComboBox uIYearComboBox = this.UIEmployeeRegistrationWindow.UIDatepickerGroup.UIYearComboBox;
            XamlRadioButton uIMaleRadioButton = this.UIEmployeeRegistrationWindow.UIMaleRadioButton;
            XamlComboBox uIMonthComboBox1 = this.UIEmployeeRegistrationWindow.UIDatepickerGroup1.UIMonthComboBox;
            XamlComboBox uIDayComboBox1 = this.UIEmployeeRegistrationWindow.UIDatepickerGroup1.UIDayComboBox;
            XamlComboBox uIYearComboBox1 = this.UIEmployeeRegistrationWindow.UIDatepickerGroup1.UIYearComboBox;
            XamlComboBox uICboDeptComboBox = this.UIEmployeeRegistrationWindow.UICboDeptComboBox;
            XamlComboBox uICboTeamComboBox = this.UIEmployeeRegistrationWindow.UICboTeamComboBox;
            XamlEdit uITxtPositionEdit = this.UIEmployeeRegistrationWindow.UITxtPositionEdit;
            XamlEdit uITxtPhnoEdit = this.UIEmployeeRegistrationWindow.UITxtPhnoEdit;
            XamlEdit uITxtAddressEdit = this.UIEmployeeRegistrationWindow.UITxtAddressEdit;
            XamlEdit uITxtSalaryEdit = this.UIEmployeeRegistrationWindow.UITxtSalaryEdit;
            XamlButton uIAddButton = this.UIEmployeeRegistrationWindow.UIAddButton;
            XamlButton uIGoBackButton = this.UIEmployeeRegistrationWindow.UIGoBackButton;
            #endregion

            // Verify that the 'ControlType' property of 'Register' button equals 'Button'
            Assert.AreEqual(this.RegisterExpectedValues.UIRegisterButtonControlType, uIRegisterButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtName' text box equals 'Edit'
            Assert.AreEqual(this.RegisterExpectedValues.UITxtNameEditControlType, uITxtNameEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtNrc' text box equals 'Edit'
            Assert.AreEqual(this.RegisterExpectedValues.UITxtNrcEditControlType, uITxtNrcEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Month' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UIMonthComboBoxControlType, uIMonthComboBox.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Day' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UIDayComboBoxControlType, uIDayComboBox.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Year' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UIYearComboBoxControlType, uIYearComboBox.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Male' radio button equals 'RadioButton'
            Assert.AreEqual(this.RegisterExpectedValues.UIMaleRadioButtonControlType, uIMaleRadioButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Month' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UIMonthComboBoxControlType1, uIMonthComboBox1.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Day' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UIDayComboBoxControlType1, uIDayComboBox1.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Year' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UIYearComboBoxControlType1, uIYearComboBox1.ControlType.ToString());

            // Verify that the 'ControlType' property of 'cboDept' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UICboDeptComboBoxControlType, uICboDeptComboBox.ControlType.ToString());

            // Verify that the 'ControlType' property of 'cboTeam' combo box equals 'ComboBox'
            Assert.AreEqual(this.RegisterExpectedValues.UICboTeamComboBoxControlType, uICboTeamComboBox.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtPosition' text box equals 'Edit'
            Assert.AreEqual(this.RegisterExpectedValues.UITxtPositionEditControlType, uITxtPositionEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtPhno' text box equals 'Edit'
            Assert.AreEqual(this.RegisterExpectedValues.UITxtPhnoEditControlType, uITxtPhnoEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtAddress' text box equals 'Edit'
            Assert.AreEqual(this.RegisterExpectedValues.UITxtAddressEditControlType, uITxtAddressEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtSalary' text box equals 'Edit'
            Assert.AreEqual(this.RegisterExpectedValues.UITxtSalaryEditControlType, uITxtSalaryEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Add' button equals 'Button'
            Assert.AreEqual(this.RegisterExpectedValues.UIAddButtonControlType, uIAddButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
            Assert.AreEqual(this.RegisterExpectedValues.UIGoBackButtonControlType, uIGoBackButton.ControlType.ToString());
        }
        
        /// <summary>
        /// UpdateSearch - Use 'UpdateSearchExpectedValues' to pass parameters into this method.
        /// </summary>
        public void UpdateSearch()
        {
            #region Variable Declarations
            XamlButton uIUpdateButton = this.UIEmployeeRegistrationWindow.UIUpdateButton;
            XamlButton uIGoBackButton = this.UIEmployeeRegistrationWindow.UIGoBackButton;
            #endregion

            // Verify that the 'ControlType' property of 'Update' button equals 'Button'
            Assert.AreEqual(this.UpdateSearchExpectedValues.UIUpdateButtonControlType, uIUpdateButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
            Assert.AreEqual(this.UpdateSearchExpectedValues.UIGoBackButtonControlType, uIGoBackButton.ControlType.ToString());
        }
        
        /// <summary>
        /// Update - Use 'UpdateExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Update()
        {
            #region Variable Declarations
            XamlButton uIUpdateButton = this.UIEmployeeRegistrationWindow.UIUpdateButton;
            XamlButton uIGoBackButton = this.UIEmployeeRegistrationWindow.UIGoBackButton;
            #endregion

            // Verify that the 'ControlType' property of 'Update' button equals 'Button'
            Assert.AreEqual(this.UpdateExpectedValues.UIUpdateButtonControlType, uIUpdateButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
            Assert.AreEqual(this.UpdateExpectedValues.UIGoBackButtonControlType, uIGoBackButton.ControlType.ToString());
        }
        
        /// <summary>
        /// UpdatePage - Use 'UpdatePageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void UpdatePage()
        {
            #region Variable Declarations
            XamlButton uIUpdateButton = this.UIEmployeeRegistrationWindow.UIUpdateButton;
            XamlEdit uITxtENameEdit = this.UIEmployeeRegistrationWindow.UITxtENameEdit;
            XamlButton uISearchButton = this.UIEmployeeRegistrationWindow.UISearchButton;
            XamlEdit uITxtNameEdit = this.UIEmployeeRegistrationWindow.UITxtNameEdit;
            XamlButton uIUpdateButton1 = this.UIEmployeeRegistrationWindow.UIUpdateButton1;
            XamlButton uIGoBackToLoginButton = this.UIEmployeeRegistrationWindow.UIGoBackToLoginButton;
            #endregion

            // Verify that the 'ControlType' property of 'Update' button equals 'Button'
            Assert.AreEqual(this.UpdatePageExpectedValues.UIUpdateButtonControlType, uIUpdateButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtEName' text box equals 'Edit'
            Assert.AreEqual(this.UpdatePageExpectedValues.UITxtENameEditControlType, uITxtENameEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Search' button equals 'Button'
            Assert.AreEqual(this.UpdatePageExpectedValues.UISearchButtonControlType, uISearchButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtName' text box equals 'Edit'
            Assert.AreEqual(this.UpdatePageExpectedValues.UITxtNameEditControlType, uITxtNameEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Update' button equals 'Button'
            Assert.AreEqual(this.UpdatePageExpectedValues.UIUpdateButton1ControlType, uIUpdateButton1.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Go Back To Login' button equals 'Button'
            Assert.AreEqual(this.UpdatePageExpectedValues.UIGoBackToLoginButtonControlType, uIGoBackToLoginButton.ControlType.ToString());
        }
        
        /// <summary>
        /// GoBack - Use 'GoBackExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GoBack()
        {
            #region Variable Declarations
            XamlButton uIGoBackButton = this.UIEmployeeRegistrationWindow.UIGoBackButton;
            #endregion

            // Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
            Assert.AreEqual(this.GoBackExpectedValues.UIGoBackButtonControlType, uIGoBackButton.ControlType.ToString());
        }
        
        /// <summary>
        /// GoBackMain - Use 'GoBackMainExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GoBackMain()
        {
            #region Variable Declarations
            XamlButton uIGoBackToMainButton = this.UIEmployeeRegistrationWindow.UIGoBackToMainButton;
            #endregion

            // Verify that the 'ControlType' property of 'Go Back To Main' button equals 'Button'
            Assert.AreEqual(this.GoBackMainExpectedValues.UIGoBackToMainButtonControlType, uIGoBackToMainButton.ControlType.ToString());
        }
        
        /// <summary>
        /// Search - Use 'SearchExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Search()
        {
            #region Variable Declarations
            XamlButton uISearchPageButton = this.UIEmployeeRegistrationWindow.UISearchPageButton;
            XamlEdit uITxtNameEdit = this.UIEmployeeRegistrationWindow.UITxtNameEdit;
            XamlButton uISearchNameButton = this.UIEmployeeRegistrationWindow.UISearchNameButton;
            XamlButton uIGoBackMainButton = this.UIEmployeeRegistrationWindow.UIGoBackMainButton;
            #endregion

            // Verify that the 'ControlType' property of 'Search Page' button equals 'Button'
            Assert.AreEqual(this.SearchExpectedValues.UISearchPageButtonControlType, uISearchPageButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtName' text box equals 'Edit'
            Assert.AreEqual(this.SearchExpectedValues.UITxtNameEditControlType, uITxtNameEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Search Name' button equals 'Button'
            Assert.AreEqual(this.SearchExpectedValues.UISearchNameButtonControlType, uISearchNameButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Go Back Main' button equals 'Button'
            Assert.AreEqual(this.SearchExpectedValues.UIGoBackMainButtonControlType, uIGoBackMainButton.ControlType.ToString());
        }
        
        /// <summary>
        /// Delete - Use 'DeleteExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Delete()
        {
            #region Variable Declarations
            XamlButton uIDeletePageButton = this.UIEmployeeRegistrationWindow.UIDeletePageButton;
            XamlEdit uITxtENameEdit = this.UIEmployeeRegistrationWindow.UITxtENameEdit;
            XamlButton uISearchByNameButton = this.UIEmployeeRegistrationWindow.UISearchByNameButton;
            XamlButton uIDeleteButton = this.UIEmployeeRegistrationWindow.UIDeleteButton;
            XamlButton uIGoBackToLoginButton1 = this.UIEmployeeRegistrationWindow.UIGoBackToLoginButton1;
            #endregion

            // Verify that the 'ControlType' property of 'Delete Page' button equals 'Button'
            Assert.AreEqual(this.DeleteExpectedValues.UIDeletePageButtonControlType, uIDeletePageButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtEName' text box equals 'Edit'
            Assert.AreEqual(this.DeleteExpectedValues.UITxtENameEditControlType, uITxtENameEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Search By Name' button equals 'Button'
            Assert.AreEqual(this.DeleteExpectedValues.UISearchByNameButtonControlType, uISearchByNameButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Delete' button equals 'Button'
            Assert.AreEqual(this.DeleteExpectedValues.UIDeleteButtonControlType, uIDeleteButton.ControlType.ToString());

            // Verify that the 'ControlType' property of 'Go Back To Login' button equals 'Button'
            Assert.AreEqual(this.DeleteExpectedValues.UIGoBackToLoginButton1ControlType, uIGoBackToLoginButton1.ControlType.ToString());
        }
        
        /// <summary>
        /// Main - Use 'MainExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Main()
        {
            #region Variable Declarations
            XamlButton uIGoBackToMainButton = this.UIEmployeeRegistrationWindow.UIGoBackToMainButton;
            #endregion

            // Verify that the 'AutomationId' property of 'Go Back To Main' button equals 'btnGoBackToMain'
            Assert.AreEqual(this.MainExpectedValues.UIGoBackToMainButtonAutomationId, uIGoBackToMainButton.AutomationId);
        }
        
        #region Properties
        public virtual LoginExpectedValues LoginExpectedValues
        {
            get
            {
                if ((this.mLoginExpectedValues == null))
                {
                    this.mLoginExpectedValues = new LoginExpectedValues();
                }
                return this.mLoginExpectedValues;
            }
        }
        
        public virtual RegisterExpectedValues RegisterExpectedValues
        {
            get
            {
                if ((this.mRegisterExpectedValues == null))
                {
                    this.mRegisterExpectedValues = new RegisterExpectedValues();
                }
                return this.mRegisterExpectedValues;
            }
        }
        
        public virtual UpdateSearchExpectedValues UpdateSearchExpectedValues
        {
            get
            {
                if ((this.mUpdateSearchExpectedValues == null))
                {
                    this.mUpdateSearchExpectedValues = new UpdateSearchExpectedValues();
                }
                return this.mUpdateSearchExpectedValues;
            }
        }
        
        public virtual UpdateExpectedValues UpdateExpectedValues
        {
            get
            {
                if ((this.mUpdateExpectedValues == null))
                {
                    this.mUpdateExpectedValues = new UpdateExpectedValues();
                }
                return this.mUpdateExpectedValues;
            }
        }
        
        public virtual UpdatePageExpectedValues UpdatePageExpectedValues
        {
            get
            {
                if ((this.mUpdatePageExpectedValues == null))
                {
                    this.mUpdatePageExpectedValues = new UpdatePageExpectedValues();
                }
                return this.mUpdatePageExpectedValues;
            }
        }
        
        public virtual GoBackExpectedValues GoBackExpectedValues
        {
            get
            {
                if ((this.mGoBackExpectedValues == null))
                {
                    this.mGoBackExpectedValues = new GoBackExpectedValues();
                }
                return this.mGoBackExpectedValues;
            }
        }
        
        public virtual GoBackMainExpectedValues GoBackMainExpectedValues
        {
            get
            {
                if ((this.mGoBackMainExpectedValues == null))
                {
                    this.mGoBackMainExpectedValues = new GoBackMainExpectedValues();
                }
                return this.mGoBackMainExpectedValues;
            }
        }
        
        public virtual SearchExpectedValues SearchExpectedValues
        {
            get
            {
                if ((this.mSearchExpectedValues == null))
                {
                    this.mSearchExpectedValues = new SearchExpectedValues();
                }
                return this.mSearchExpectedValues;
            }
        }
        
        public virtual DeleteExpectedValues DeleteExpectedValues
        {
            get
            {
                if ((this.mDeleteExpectedValues == null))
                {
                    this.mDeleteExpectedValues = new DeleteExpectedValues();
                }
                return this.mDeleteExpectedValues;
            }
        }
        
        public virtual MainExpectedValues MainExpectedValues
        {
            get
            {
                if ((this.mMainExpectedValues == null))
                {
                    this.mMainExpectedValues = new MainExpectedValues();
                }
                return this.mMainExpectedValues;
            }
        }
        
        public UIEmployeeRegistrationWindow UIEmployeeRegistrationWindow
        {
            get
            {
                if ((this.mUIEmployeeRegistrationWindow == null))
                {
                    this.mUIEmployeeRegistrationWindow = new UIEmployeeRegistrationWindow();
                }
                return this.mUIEmployeeRegistrationWindow;
            }
        }
        #endregion
        
        #region Fields
        private LoginExpectedValues mLoginExpectedValues;
        
        private RegisterExpectedValues mRegisterExpectedValues;
        
        private UpdateSearchExpectedValues mUpdateSearchExpectedValues;
        
        private UpdateExpectedValues mUpdateExpectedValues;
        
        private UpdatePageExpectedValues mUpdatePageExpectedValues;
        
        private GoBackExpectedValues mGoBackExpectedValues;
        
        private GoBackMainExpectedValues mGoBackMainExpectedValues;
        
        private SearchExpectedValues mSearchExpectedValues;
        
        private DeleteExpectedValues mDeleteExpectedValues;
        
        private MainExpectedValues mMainExpectedValues;
        
        private UIEmployeeRegistrationWindow mUIEmployeeRegistrationWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LoginExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtUserName' text box equals 'Edit'
        /// </summary>
        public string UITxtUserNameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtPassword' text box equals 'Edit'
        /// </summary>
        public string UITxtPasswordEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'LogIn' button equals 'Button'
        /// </summary>
        public string UILogInButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Register'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RegisterExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Register' button equals 'Button'
        /// </summary>
        public string UIRegisterButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtName' text box equals 'Edit'
        /// </summary>
        public string UITxtNameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtNrc' text box equals 'Edit'
        /// </summary>
        public string UITxtNrcEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Month' combo box equals 'ComboBox'
        /// </summary>
        public string UIMonthComboBoxControlType = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Day' combo box equals 'ComboBox'
        /// </summary>
        public string UIDayComboBoxControlType = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Year' combo box equals 'ComboBox'
        /// </summary>
        public string UIYearComboBoxControlType = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Male' radio button equals 'RadioButton'
        /// </summary>
        public string UIMaleRadioButtonControlType = "RadioButton";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Month' combo box equals 'ComboBox'
        /// </summary>
        public string UIMonthComboBoxControlType1 = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Day' combo box equals 'ComboBox'
        /// </summary>
        public string UIDayComboBoxControlType1 = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Year' combo box equals 'ComboBox'
        /// </summary>
        public string UIYearComboBoxControlType1 = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'cboDept' combo box equals 'ComboBox'
        /// </summary>
        public string UICboDeptComboBoxControlType = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'cboTeam' combo box equals 'ComboBox'
        /// </summary>
        public string UICboTeamComboBoxControlType = "ComboBox";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtPosition' text box equals 'Edit'
        /// </summary>
        public string UITxtPositionEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtPhno' text box equals 'Edit'
        /// </summary>
        public string UITxtPhnoEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtAddress' text box equals 'Edit'
        /// </summary>
        public string UITxtAddressEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtSalary' text box equals 'Edit'
        /// </summary>
        public string UITxtSalaryEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Add' button equals 'Button'
        /// </summary>
        public string UIAddButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
        /// </summary>
        public string UIGoBackButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateSearch'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdateSearchExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Update' button equals 'Button'
        /// </summary>
        public string UIUpdateButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
        /// </summary>
        public string UIGoBackButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Update'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Update' button equals 'Button'
        /// </summary>
        public string UIUpdateButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
        /// </summary>
        public string UIGoBackButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdatePage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdatePageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Update' button equals 'Button'
        /// </summary>
        public string UIUpdateButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtEName' text box equals 'Edit'
        /// </summary>
        public string UITxtENameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Search' button equals 'Button'
        /// </summary>
        public string UISearchButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtName' text box equals 'Edit'
        /// </summary>
        public string UITxtNameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Update' button equals 'Button'
        /// </summary>
        public string UIUpdateButton1ControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back To Login' button equals 'Button'
        /// </summary>
        public string UIGoBackToLoginButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoBack'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GoBackExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back' button equals 'Button'
        /// </summary>
        public string UIGoBackButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoBackMain'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GoBackMainExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back To Main' button equals 'Button'
        /// </summary>
        public string UIGoBackToMainButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Search'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SearchExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Search Page' button equals 'Button'
        /// </summary>
        public string UISearchPageButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtName' text box equals 'Edit'
        /// </summary>
        public string UITxtNameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Search Name' button equals 'Button'
        /// </summary>
        public string UISearchNameButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back Main' button equals 'Button'
        /// </summary>
        public string UIGoBackMainButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Delete'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class DeleteExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Delete Page' button equals 'Button'
        /// </summary>
        public string UIDeletePageButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtEName' text box equals 'Edit'
        /// </summary>
        public string UITxtENameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Search By Name' button equals 'Button'
        /// </summary>
        public string UISearchByNameButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Delete' button equals 'Button'
        /// </summary>
        public string UIDeleteButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Go Back To Login' button equals 'Button'
        /// </summary>
        public string UIGoBackToLoginButton1ControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Main'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class MainExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Go Back To Main' button equals 'btnGoBackToMain'
        /// </summary>
        public string UIGoBackToMainButtonAutomationId = "btnGoBackToMain";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEmployeeRegistrationWindow : XamlWindow
    {
        
        public UIEmployeeRegistrationWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "EmployeeRegistrationWinRT";
            this.SearchProperties[XamlControl.PropertyNames.ClassName] = "Windows.UI.Core.CoreWindow";
            this.WindowTitles.Add("EmployeeRegistrationWinRT");
            #endregion
        }
        
        #region Properties
        public XamlEdit UITxtUserNameEdit
        {
            get
            {
                if ((this.mUITxtUserNameEdit == null))
                {
                    this.mUITxtUserNameEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtUserNameEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtUserName";
                    this.mUITxtUserNameEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtUserNameEdit;
            }
        }
        
        public XamlEdit UITxtPasswordEdit
        {
            get
            {
                if ((this.mUITxtPasswordEdit == null))
                {
                    this.mUITxtPasswordEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtPasswordEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtPassword";
                    this.mUITxtPasswordEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtPasswordEdit;
            }
        }
        
        public XamlButton UILogInButton
        {
            get
            {
                if ((this.mUILogInButton == null))
                {
                    this.mUILogInButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUILogInButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnLogin";
                    this.mUILogInButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUILogInButton;
            }
        }
        
        public XamlButton UIRegisterButton
        {
            get
            {
                if ((this.mUIRegisterButton == null))
                {
                    this.mUIRegisterButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIRegisterButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnRegister";
                    this.mUIRegisterButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIRegisterButton;
            }
        }
        
        public XamlEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtName";
                    this.mUITxtNameEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        
        public XamlEdit UITxtNrcEdit
        {
            get
            {
                if ((this.mUITxtNrcEdit == null))
                {
                    this.mUITxtNrcEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtNrcEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtNrc";
                    this.mUITxtNrcEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtNrcEdit;
            }
        }
        
        public UIDatepickerGroup UIDatepickerGroup
        {
            get
            {
                if ((this.mUIDatepickerGroup == null))
                {
                    this.mUIDatepickerGroup = new UIDatepickerGroup(this);
                }
                return this.mUIDatepickerGroup;
            }
        }
        
        public XamlRadioButton UIMaleRadioButton
        {
            get
            {
                if ((this.mUIMaleRadioButton == null))
                {
                    this.mUIMaleRadioButton = new XamlRadioButton(this);
                    #region Search Criteria
                    this.mUIMaleRadioButton.SearchProperties[XamlRadioButton.PropertyNames.AutomationId] = "radMale";
                    this.mUIMaleRadioButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIMaleRadioButton;
            }
        }
        
        public UIDatepickerGroup1 UIDatepickerGroup1
        {
            get
            {
                if ((this.mUIDatepickerGroup1 == null))
                {
                    this.mUIDatepickerGroup1 = new UIDatepickerGroup1(this);
                }
                return this.mUIDatepickerGroup1;
            }
        }
        
        public XamlComboBox UICboDeptComboBox
        {
            get
            {
                if ((this.mUICboDeptComboBox == null))
                {
                    this.mUICboDeptComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUICboDeptComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "cboDept";
                    this.mUICboDeptComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUICboDeptComboBox;
            }
        }
        
        public XamlComboBox UICboTeamComboBox
        {
            get
            {
                if ((this.mUICboTeamComboBox == null))
                {
                    this.mUICboTeamComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUICboTeamComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "cboTeam";
                    this.mUICboTeamComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUICboTeamComboBox;
            }
        }
        
        public XamlEdit UITxtPositionEdit
        {
            get
            {
                if ((this.mUITxtPositionEdit == null))
                {
                    this.mUITxtPositionEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtPositionEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtPosition";
                    this.mUITxtPositionEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtPositionEdit;
            }
        }
        
        public XamlEdit UITxtPhnoEdit
        {
            get
            {
                if ((this.mUITxtPhnoEdit == null))
                {
                    this.mUITxtPhnoEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtPhnoEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtPhno";
                    this.mUITxtPhnoEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtPhnoEdit;
            }
        }
        
        public XamlEdit UITxtAddressEdit
        {
            get
            {
                if ((this.mUITxtAddressEdit == null))
                {
                    this.mUITxtAddressEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtAddressEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtAddress";
                    this.mUITxtAddressEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtAddressEdit;
            }
        }
        
        public XamlEdit UITxtSalaryEdit
        {
            get
            {
                if ((this.mUITxtSalaryEdit == null))
                {
                    this.mUITxtSalaryEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtSalaryEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtSalary";
                    this.mUITxtSalaryEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtSalaryEdit;
            }
        }
        
        public XamlButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnAdd";
                    this.mUIAddButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public XamlButton UIGoBackButton
        {
            get
            {
                if ((this.mUIGoBackButton == null))
                {
                    this.mUIGoBackButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIGoBackButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnGoBack";
                    this.mUIGoBackButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIGoBackButton;
            }
        }
        
        public XamlButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnUpdate";
                    this.mUIUpdateButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        
        public XamlEdit UITxtENameEdit
        {
            get
            {
                if ((this.mUITxtENameEdit == null))
                {
                    this.mUITxtENameEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtENameEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txtEName";
                    this.mUITxtENameEdit.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUITxtENameEdit;
            }
        }
        
        public XamlButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnSearch";
                    this.mUISearchButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public XamlButton UIUpdateButton1
        {
            get
            {
                if ((this.mUIUpdateButton1 == null))
                {
                    this.mUIUpdateButton1 = new XamlButton(this);
                    #region Search Criteria
                    this.mUIUpdateButton1.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnUpdateUp";
                    this.mUIUpdateButton1.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIUpdateButton1;
            }
        }
        
        public XamlButton UIGoBackToLoginButton
        {
            get
            {
                if ((this.mUIGoBackToLoginButton == null))
                {
                    this.mUIGoBackToLoginButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIGoBackToLoginButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnGoBackLogin";
                    this.mUIGoBackToLoginButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIGoBackToLoginButton;
            }
        }
        
        public XamlButton UIGoBackToMainButton
        {
            get
            {
                if ((this.mUIGoBackToMainButton == null))
                {
                    this.mUIGoBackToMainButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIGoBackToMainButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnGoBackToMain";
                    this.mUIGoBackToMainButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIGoBackToMainButton;
            }
        }
        
        public XamlButton UISearchPageButton
        {
            get
            {
                if ((this.mUISearchPageButton == null))
                {
                    this.mUISearchPageButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISearchPageButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnSearchEmp";
                    this.mUISearchPageButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUISearchPageButton;
            }
        }
        
        public XamlButton UISearchNameButton
        {
            get
            {
                if ((this.mUISearchNameButton == null))
                {
                    this.mUISearchNameButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISearchNameButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnSearchEname";
                    this.mUISearchNameButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUISearchNameButton;
            }
        }
        
        public XamlButton UIGoBackMainButton
        {
            get
            {
                if ((this.mUIGoBackMainButton == null))
                {
                    this.mUIGoBackMainButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIGoBackMainButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnGoBackMain";
                    this.mUIGoBackMainButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIGoBackMainButton;
            }
        }
        
        public XamlButton UIDeletePageButton
        {
            get
            {
                if ((this.mUIDeletePageButton == null))
                {
                    this.mUIDeletePageButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIDeletePageButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnDelete";
                    this.mUIDeletePageButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIDeletePageButton;
            }
        }
        
        public XamlButton UISearchByNameButton
        {
            get
            {
                if ((this.mUISearchByNameButton == null))
                {
                    this.mUISearchByNameButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISearchByNameButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnSearchByName";
                    this.mUISearchByNameButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUISearchByNameButton;
            }
        }
        
        public XamlButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnDeleteDel";
                    this.mUIDeleteButton.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        
        public XamlButton UIGoBackToLoginButton1
        {
            get
            {
                if ((this.mUIGoBackToLoginButton1 == null))
                {
                    this.mUIGoBackToLoginButton1 = new XamlButton(this);
                    #region Search Criteria
                    this.mUIGoBackToLoginButton1.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btnGoBackLoginPage";
                    this.mUIGoBackToLoginButton1.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIGoBackToLoginButton1;
            }
        }
        #endregion
        
        #region Fields
        private XamlEdit mUITxtUserNameEdit;
        
        private XamlEdit mUITxtPasswordEdit;
        
        private XamlButton mUILogInButton;
        
        private XamlButton mUIRegisterButton;
        
        private XamlEdit mUITxtNameEdit;
        
        private XamlEdit mUITxtNrcEdit;
        
        private UIDatepickerGroup mUIDatepickerGroup;
        
        private XamlRadioButton mUIMaleRadioButton;
        
        private UIDatepickerGroup1 mUIDatepickerGroup1;
        
        private XamlComboBox mUICboDeptComboBox;
        
        private XamlComboBox mUICboTeamComboBox;
        
        private XamlEdit mUITxtPositionEdit;
        
        private XamlEdit mUITxtPhnoEdit;
        
        private XamlEdit mUITxtAddressEdit;
        
        private XamlEdit mUITxtSalaryEdit;
        
        private XamlButton mUIAddButton;
        
        private XamlButton mUIGoBackButton;
        
        private XamlButton mUIUpdateButton;
        
        private XamlEdit mUITxtENameEdit;
        
        private XamlButton mUISearchButton;
        
        private XamlButton mUIUpdateButton1;
        
        private XamlButton mUIGoBackToLoginButton;
        
        private XamlButton mUIGoBackToMainButton;
        
        private XamlButton mUISearchPageButton;
        
        private XamlButton mUISearchNameButton;
        
        private XamlButton mUIGoBackMainButton;
        
        private XamlButton mUIDeletePageButton;
        
        private XamlButton mUISearchByNameButton;
        
        private XamlButton mUIDeleteButton;
        
        private XamlButton mUIGoBackToLoginButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDatepickerGroup : XamlControl
    {
        
        public UIDatepickerGroup(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Group";
            this.SearchProperties["AutomationId"] = "dateTimeBD";
            this.WindowTitles.Add("EmployeeRegistrationWinRT");
            #endregion
        }
        
        #region Properties
        public XamlComboBox UIMonthComboBox
        {
            get
            {
                if ((this.mUIMonthComboBox == null))
                {
                    this.mUIMonthComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIMonthComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "MonthPicker";
                    this.mUIMonthComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIMonthComboBox;
            }
        }
        
        public XamlComboBox UIDayComboBox
        {
            get
            {
                if ((this.mUIDayComboBox == null))
                {
                    this.mUIDayComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIDayComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "DayPicker";
                    this.mUIDayComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIDayComboBox;
            }
        }
        
        public XamlComboBox UIYearComboBox
        {
            get
            {
                if ((this.mUIYearComboBox == null))
                {
                    this.mUIYearComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIYearComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "YearPicker";
                    this.mUIYearComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIYearComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XamlComboBox mUIMonthComboBox;
        
        private XamlComboBox mUIDayComboBox;
        
        private XamlComboBox mUIYearComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDatepickerGroup1 : XamlControl
    {
        
        public UIDatepickerGroup1(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Group";
            this.SearchProperties["AutomationId"] = "dateTimeJoinDate";
            this.WindowTitles.Add("EmployeeRegistrationWinRT");
            #endregion
        }
        
        #region Properties
        public XamlComboBox UIMonthComboBox
        {
            get
            {
                if ((this.mUIMonthComboBox == null))
                {
                    this.mUIMonthComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIMonthComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "MonthPicker";
                    this.mUIMonthComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIMonthComboBox;
            }
        }
        
        public XamlComboBox UIDayComboBox
        {
            get
            {
                if ((this.mUIDayComboBox == null))
                {
                    this.mUIDayComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIDayComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "DayPicker";
                    this.mUIDayComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIDayComboBox;
            }
        }
        
        public XamlComboBox UIYearComboBox
        {
            get
            {
                if ((this.mUIYearComboBox == null))
                {
                    this.mUIYearComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIYearComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "YearPicker";
                    this.mUIYearComboBox.WindowTitles.Add("EmployeeRegistrationWinRT");
                    #endregion
                }
                return this.mUIYearComboBox;
            }
        }
        #endregion
        
        #region Fields
        private XamlComboBox mUIMonthComboBox;
        
        private XamlComboBox mUIDayComboBox;
        
        private XamlComboBox mUIYearComboBox;
        #endregion
    }
}
